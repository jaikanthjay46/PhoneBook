{"version":3,"sources":["logo.svg","components/Add.js","components/PhoneBook.js","App.js","serviceWorker.js","reducers/rootReducers.js","index.js"],"names":["module","exports","__webpack_require__","p","Add","addContact","event","preventDefault","console","log","target","data","FormData","tmp","_this","props","contacts","forEach","x","get","number","toast","success","position","POSITION","TOP_RIGHT","error","react_default","a","createElement","Container","Row","className","Col","sm","size","offset","react_router_dom","to","Button","color","Form","onSubmit","this","FormGroup","Label","for","Input","type","name","id","placeholder","Component","connect","state","dispatch","contact","PhoneBook","delete","deleteContact","dataset","phone","_this2","Table","map","value","index","key","fname","lname","email","onClick","data-phone","App","Navbar","expand","NavbarBrand","href","react_toastify","react_router","exact","path","component","Boolean","window","location","hostname","match","initState","rootReducer","arguments","length","undefined","action","obj","push","Object","objectSpread","filter","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf46809a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport {Container, Row, Col, Form, FormGroup, Input,Label, Button } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from 'react-toastify';\r\n\r\nclass Add extends Component {\r\n     \r\n\taddContact = (event) =>{\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(event.target);\r\n\t\tconst data = new FormData(event.target);\r\n\t\tvar tmp = true;\r\n\t\tthis.props.contacts.forEach( x => {\r\n\t\t\tif(data.get(\"number\") == x.number){\r\n\t\t\t\ttmp = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif( tmp ) {\r\n\t\t\tthis.props.addContact(data);\r\n\t\t\ttoast.success(\"Contact Added Successfully\", {\r\n\t\t\t\tposition: toast.POSITION.TOP_RIGHT\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\ttoast.error(\"Contact Already Exists\", {\r\n\t\t\t\tposition: toast.POSITION.TOP_RIGHT\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t}\r\n    render() {\r\n        return (\r\n           <Container>\r\n\t\t\t   <Row className=\"my-3 \" >\r\n\t\t\t\t\t<Col sm={{ size: 4, offset: 8 }}>\r\n\t\t\t\t\t\t<center><Link to=\"/\"><Button color=\"danger\">Back</Button></Link> </center>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"my-3 \">\r\n\t\t\t\t\t<Form onSubmit={this.addContact}>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Label for=\"fname\">First Name</Label>\r\n\t\t\t\t\t\t\t<Input type=\"text\" name=\"fname\" id=\"fname\" placeholder=\"First Name\" />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Label for=\"lname\">Last Name</Label>\r\n\t\t\t\t\t\t\t<Input type=\"text\" name=\"lname\" id=\"lname\" placeholder=\"Last Name\" />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Label for=\"phone\">Phone</Label>\r\n\t\t\t\t\t\t\t<Input type=\"number\" name=\"phone\" id=\"phone\" placeholder=\"Phone\" />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<Label for=\"email\">Email</Label>\r\n\t\t\t\t\t\t\t<Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"example@example.com\" />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<Button color=\"primary\">ADD</Button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Row>\r\n\t\t   </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        contacts: state.contacts\r\n    }\r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n    return {\r\n        addContact: (contact) => {\r\n            dispatch({\r\n                type: 'ADD_CONTACT',\r\n                contact\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStatetoProps,mapDispatchtoProps)(Add);","import React, { Component } from 'react';\r\nimport { Container,Row, Col, Button, Table } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from 'react-toastify';\r\n\r\nclass PhoneBook extends Component {\r\n\tdelete = (event) => {\r\n\t\tthis.props.deleteContact(event.target.dataset.phone);\r\n\t\ttoast.success(\"Contact Removed Successfully\", {\r\n\t\t\tposition: toast.POSITION.TOP_RIGHT\r\n\t\t})\r\n\t}\r\n    render() {\r\n        return (\r\n            <Container>\r\n\t\t\t\t<Row className=\"my-3 \" >\r\n\t\t\t\t\t<Col sm={{ size: 2, offset: 10 }}>\r\n\t\t\t\t\t\t<div className=\"ml-auto\"><Link to=\"/add\"><Button color=\"primary\">Add Contacts</Button></Link> </div>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"my-3 \" >\r\n\t\t\t\t\t<Table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<th>First Name</th>\r\n\t\t\t\t\t\t\t<th>Last Name</th>\r\n\t\t\t\t\t\t\t<th>Phone Number</th>\r\n\t\t\t\t\t\t\t<th>Email</th>\r\n\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t{this.props.contacts.map((value, index) => {\r\n\t\t\t\t\t\treturn <tr key={index}>\r\n\t\t\t\t\t\t\t<td>{value.fname}</td>\r\n\t\t\t\t\t\t\t<td>{value.lname}</td>\r\n\t\t\t\t\t\t\t<td>{value.phone}</td>\r\n\t\t\t\t\t\t\t<td>{value.email}</td>\r\n\t\t\t\t\t\t\t<td><Button onClick={this.delete} data-phone={value.phone} color=\"danger\">Delete</Button></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n        );\r\n    }\r\n}\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        contacts: state.contacts\r\n    }\r\n}\r\nconst mapDispatchtoProps = (dispatch) => {\r\n    return {\r\n        deleteContact: (phone) => {\r\n            dispatch({\r\n                type: 'REMOVE_CONTACT',\r\n                phone\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStatetoProps,mapDispatchtoProps)(PhoneBook);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Add from './components/Add.js';\nimport PhoneBook from './components/PhoneBook.js';\nimport { BrowserRouter,Route} from \"react-router-dom\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Navbar color=\"dark\"  expand=\"md\">\n          <NavbarBrand href=\"/\">PhoneBook</NavbarBrand>        \n        </Navbar>\n        <ToastContainer></ToastContainer>\n        <Route exact path=\"/\" component={PhoneBook} />\n        <Route path=\"/add\" component={Add} />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n\tcontacts: [ {\r\n\t\t\"fname\": \"Jaikanth\",\r\n\t\t\"lname\": \"Jay\",\r\n\t\t\"phone\": \"1234567890\",\r\n\t\t\"email\": \"a@a.com\"\r\n\t}]\r\n\t\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase 'ADD_CONTACT': \r\n\t\t\tvar tmp = state.contacts;\r\n\t\t\tvar obj = {\r\n\t\t\t\t\"fname\": action.contact.get(\"fname\"),\r\n\t\t\t\t\"lname\": action.contact.get(\"lname\"),\r\n\t\t\t\t\"phone\": action.contact.get(\"phone\"),\r\n\t\t\t\t\"email\": action.contact.get(\"email\")\r\n\t\t\t}\r\n\t\t\ttmp.push(obj);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcontacts: tmp\t\t\t\t\r\n\t\t\t}\r\n\t\tbreak;\r\n\t\tcase 'REMOVE_CONTACT': \r\n\t\t\tvar tmp = state.contacts.filter( x => x.phone !== action.phone)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcontacts: tmp\t\t\t\t\r\n\t\t\t}\r\n\t\tbreak;\r\n\t} \r\n\treturn state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport { Provider } from \"react-redux\"\nimport rootReducer  from \"./reducers/rootReducers\"\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}